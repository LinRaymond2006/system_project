%INCLUDE "LDR_CFG.INC"
%DEFINE DATASZ32 DB 0X66
[BITS 16]
[ORG BUFFERBASE]
;DISK_PACKET: 0X500~0X700 (DISK_PACKET_SIZE:0X10)
;MEM_STRUCT: 0X7C00~0X7E00 (MEM_STRUCT_SIZE:0X200)
;MEM_STRUCT WILL OVERWRITE MASTER BOOT RECORD
;VBE_STRUCT: 
%DEFINE MEM_STRUCT_BASE 0X7C00


INIT:
    MOV SP, 0X7C00      ;RESET THE STACK
    MOV AX, 0XB800
    MOV GS, AX      ;TMP TEXT FRAME BUFFER SEGMENT REGISTER
    CALL DO_CLEAR_SCR
    CALL DO_DISABLE_CURSOR

%DEFINE SMAP_MAGIC 0X534D4150


;;;;;;;;;;;NOT WORKING!!!;;;;;;;;;;;;

START_GET_MEM_STRUCT:
    XOR EBX, EBX
    MOV ES, BX      ;ES=0 (STRUCTURE ADDRESS: 0X0000:0X0700 )
    MOV DI, MEM_STRUCT_BASE

    .GET_MEM_STRUCT_LOOP:
        MOV EAX, DWORD 0XE820
        MOV ECX, DWORD 20
        MOV EDX, DWORD SMAP_MAGIC
        INT 0X15
        JC .GET_MEM_STRUCT_FAILED
        INC BYTE [MEM_STRUCT_COUNT]
        ADD DI, 20
        CMP EBX, 0
        JNE .GET_MEM_STRUCT_LOOP
        JMP .GET_MEM_STRUCT_DONE
    .GET_MEM_STRUCT_FAILED:
        ;AH=ERROR CODE (0X80:INVALID COMMAND;0X86 = "E820 NOT SUPPORTED" )
        JMP $       ;HALT FOR NOW, TAKE FURTHER ACTION IN FUTURE (PRINT LOG)
    .GET_MEM_STRUCT_DONE:

DO_ENABLE_A20_FASTGATE:
	IN AL, 0X92
	OR AL, 00000010B
	OUT 0X92, AL


mov eax, LOG_CPUID_NOT_SUPPORTED
mov bx, 0x7
call DO_DISPLAY_TEXT
mov eax, LOG_CPUID_NOT_SUPPORTED
mov bx, 0x7
call DO_DISPLAY_TEXT
mov eax, LOG_CPUID_NOT_SUPPORTED
mov bx, 0x7
call DO_DISPLAY_TEXT
mov eax, LOG_CPUID_NOT_SUPPORTED
mov bx, 0x7
call DO_DISPLAY_TEXT

SETUP_PMODE:
    
    DATASZ32
    LGDT [GDT32PTR]

    DATASZ32
    LIDT [IDT32PTR]
    MOV EAX, CR0
    OR EAX, 1
    MOV CR0, EAX
    JMP DWORD SELECTOR_CODE32:PMODE_ENTRY

[BITS 32]

PMODE_ENTRY:
    
DETECT_CPUID_SUPPORT:
    PUSHFD
    POP EAX
    MOV ECX, EAX
    XOR EAX, 0X200000
    PUSH EAX
    POPFD
    PUSHFD
    POP EAX
    XOR EAX, ECX
    JZ CPUID_NOT_SUPPORTED
%DEFINE CPUID_LM (1 << 29)
DETECT_LONG_MODE_SUPPORT:
    ;REFERENCE:https://wiki.osdev.org/Setting_Up_Long_Mode
    MOV EAX, 0X80000000
    CPUID
    CMP EAX, 0X80000001
    JB LONG_MODE_NOT_SUPPORT
    MOV EAX, 0X80000001
    CPUID
    TEST EDX, CPUID_LM
    JZ LONG_MODE_NOT_SUPPORT

SETUP_LONGMODE_DEPS:
    ;SWITCH TO LONG MODE TEMPORARILY
    JMP $




[SECTION DATA]
MEM_STRUCT_COUNT: DB 0
WORD_PRINTED: DW 0
CURSOR_PTR: DW 0

[SECTION .STRINGS]

;END OF STRING
%DEFINE EOS (0X00)
%DEFINE CHAR_SPEC_N 10
%DEFINE CHAR_SPEC_B 8

LOG_CPUID_NOT_SUPPORTED: DB "INSTRUCTION 'CPUID' NOT SUPPORTED, HALT", CHAR_SPEC_N,"INSTRUCTION 'CPUID' NOT SUPPORTED, HALT", CHAR_SPEC_N, EOS
LOG_LONG_MODE_NOT_SUPPORTED: DB "CPUID.LM CLEARED, HALT", EOS

[SECTION .GDT]

LABEL_GDT32:  DD 0,0
LABEL_DESCRIPTOR_CODE32:    DD 0X0000FFFF, 0X00CF9A00
LABEL_DESCRIPTOR_DATA32:    DD 0X0000FFFF, 0X00CF9200
LABLE_GDT32_END:
GDT32LEN    EQU     (LABLE_GDT32_END - LABEL_GDT32)
GDT32LIM    EQU     (GDT32LEN-1)
GDT32PTR:
    DW GDT32LIM
    DD LABEL_GDT32
SELECTOR_CODE32 EQU     (LABEL_DESCRIPTOR_CODE32-LABEL_GDT32)
SELECTOR_DATA32 EQU     (LABEL_DESCRIPTOR_DATA32-LABEL_GDT32)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LABEL_GDT64:DQ 0X0000000000000000
LABEL_DESCRIPTOR_CODE64:    DQ 0X0020980000000000
LABEL_DESCRIPTOR_DATA64:    DQ 0X0000920000000000
LABLE_GDT64_END:
GDT64LEN    EQU     (LABLE_GDT64_END-LABEL_GDT64)
GDT64LIM    EQU     (GDT64LEN-1)
GDT64PTR:
    DW GDT64LIM
    DD LABEL_GDT64
SELECTOR_CODE64 EQU (LABEL_DESCRIPTOR_CODE64-LABEL_GDT64)
SELECTOR_DATA64 EQU (LABEL_DESCRIPTOR_DATA64-LABEL_GDT64)


[SECTION .IDT]
LABEL_IDT32:
    TIMES 0X50 DQ 0
LABEL_IDT32_END:
IDT32LEN    EQU     (LABEL_IDT32_END - LABEL_IDT32)
IDT32LIM    EQU     (IDT32LEN-1)
IDT32PTR:
    DW IDT32LIM
    DD LABEL_IDT32

[BITS 32]
[SECTION EXCEPTIONS]
%DEFINE DEFAULT_STYLE (0X7)
CPUID_NOT_SUPPORTED:
    MOV EAX, LOG_CPUID_NOT_SUPPORTED
    MOV EBX, DEFAULT_STYLE
    ;CALL DISPLAY_TEXT32
    JMP $
LONG_MODE_NOT_SUPPORT:
    MOV EAX, LOG_LONG_MODE_NOT_SUPPORTED
    MOV EBX, DEFAULT_STYLE
    ;CALL DISPLAY_TEXT32
    JMP $



[SECTION SUBROUTINE]

%INCLUDE "LOADER_LIB.INC"
