%INCLUDE "ADDR_CFG.INC"
%INCLUDE "FAT32HEADERS_ADDR.INC"
%DEFINE TMP_PAGE_TABLE_BASE (0X90000)

%DEFINE DATASZ32 DB 0X66
%DEFINE DATASZ64 DB 0X66
[BITS 16]
[ORG LOADERBASE]
;DISK_PACKET: 0X500~0X700 (DISK_PACKET_SIZE:0X10)
;MEM_STRUCT: 0X7C00~0X7E00 (MEM_STRUCT_SIZE:0X200)
;MEM_STRUCT WILL OVERWRITE MASTER BOOT RECORD
;VBE_STRUCT:
%DEFINE MEM_STRUCT_BASE 0X500


INIT:
    MOV SP, 0X7C00      ;RESET THE STACK
    MOV AX, 0XB800
    MOV GS, AX      ;TMP TEXT FRAME BUFFER SEGMENT REGISTER
    CALL DO_CLEAR_SCR
    CALL DO_DISABLE_CURSOR

%DEFINE SMAP_MAGIC 0X534D4150



START_GET_MEM_STRUCT:
    XOR EBX, EBX
    MOV ES, BX      ;ES=0 (STRUCTURE ADDRESS: 0X0000:0X0700 )
    MOV DI, MEM_STRUCT_BASE

    .GET_MEM_STRUCT_LOOP:
        MOV EAX, DWORD 0XE820
        MOV ECX, DWORD 20
        MOV EDX, DWORD SMAP_MAGIC
        INT 0X15
        JC .GET_MEM_STRUCT_FAILED
        INC BYTE [MEM_STRUCT_COUNT]
        ADD DI, 20
        CMP EBX, 0
        JNE .GET_MEM_STRUCT_LOOP
        JMP .GET_MEM_STRUCT_DONE
    .GET_MEM_STRUCT_FAILED:
        ;AH=ERROR CODE (0X80:INVALID COMMAND;0X86 = "E820 NOT SUPPORTED" )
        JMP $       ;HALT FOR NOW, TAKE FURTHER ACTION IN FUTURE (PRINT LOG)
    .GET_MEM_STRUCT_DONE:

DO_ENABLE_A20_FASTGATE:
	IN AL, 0X92
	OR AL, 00000010B
	OUT 0X92, AL



SETUP_PMODE:

    DATASZ32
    LGDT [GDT32PTR]

    DATASZ32
    LIDT [IDT32PTR]
    MOV EAX, CR0
    OR EAX, 1
    MOV CR0, EAX
    JMP DWORD SELECTOR_CODE32:PMODE_ENTRY

[BITS 32]

PMODE_ENTRY:
	mov	eax,	SELECTOR_DATA32
	mov	ds,	ax
	mov	es,	ax
	mov	fs,	ax
	mov	ss,	ax
	mov	esp, 0x7c00
	


;THE FOLLOWING CODE ARE MOSTLY COPIED FROM THE BOOT RECORD
;SOME FUNCTION INTERFACE MAY BE REPLACED WITH NEW ONES
CALCULATE_FIRSTDATASECTOR:
	MOV ECX, DWORD [BPB_FATSZ32]
	MOVZX EAX, BYTE [BPB_NUMFATS]
	MUL ECX
	MOVZX EDX, WORD [BPB_RESVDSECCNT]
	ADD EAX, EDX
	MOV DWORD [FIRSTDATASECTOR], EAX

%define ROOTDIRBASE 0x100000
;the FAT table will be temporarily located at 0x100000, the FATchain will be
;stored at 0x500, so there is no need to worried about the memory space!
%define FATBASE 0x100000
%define FATCHAINBASE 0x500


LOAD_ROOTDIR:
	.LOAD_INTO_MEM:
		;EAX IS AREADY SET
		MOV EBX, ROOTDIRBASE
		MOVZX ECX, BYTE [BPB_SECPERCLUS]
		CALL READ_ATA32

%DEFINE SFNSHIFT 5
%define FILENAME_LENGTH 11
%define SFNSIZE 32
%DEFINE FAT_ENTRY_SIZE 4
COMPARE_FILENAME:




.SETUP:
MOV ESI, ROOTDIRBASE
.COMPARE_LOOP:
	MOV ECX, FILENAME_LENGTH
	MOV EDI, KERNEL_FILENAME
	MOV EDX, ESI
	DB 0XF3 ,0XA6	; REPE CMPSB BYTE PTR DS:[ESI], BYTE PTR ES:[EDI]
	JECXZ FILE_FOUND
	;ELSE: (IF FILE NOT FOUND...)
	MOV ESI, EDX
	ADD ESI, SFNSIZE

	MOVZX EDX, BYTE [BPB_SECPERCLUS]
	ADD EDX, ROOTDIRBASE
	CMP EDX, ESI
	;JE FILE_LOST
	JE $
	JMP .COMPARE_LOOP


FILE_FOUND:
	MOV ESI, EDX
	MOV DX, WORD [ESI+20]
	SHL EDX, 16
	MOVZX ECX, WORD [ESI+26]
	ADD EDX, ECX

LOAD_FATTABLE:
	MOVZX EAX, WORD [BPB_RESVDSECCNT]
	MOV EBX, FATBASE
	CMP EAX, 0XFFFF 	;THE MAXIMUM VALUE THAT CX CAN HOLD

	JBE .SMALL_FAT

	MOV EAX, 0XFFFF
	.SMALL_FAT:
		MOV ECX, DWORD [BPB_FATSZ32]
	CALL READ_ATA32



;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;those above are tested, and no bugs were found





LINK_FATCHAIN:
	MOV ESI, FATCHAINBASE
	MOV EBP, LOAD_KERNEL
	;FUNCTION "NXT_CLUSTER"
	;EDX:CLUSTER NUMBER (AS A CALLER, THE CLUSTER NUMBER STARTS FROM 0)
	;EBP:WHERE TO GO IF RECIEVE "EOF" VALUE

	;RETURNS:
	;EDX:NEXT CLUSTER NUMBER (THE CLUSTER NUMBER STARTS FROM 0)

	;NECESSARY CONDITIONS:
	;MACRO "FATBASE" HAVE TO BE DEFINED

	;EDX IS NOW THE FIRST CLUSTER OF THE FILE, NOT SET AGAIN NOW
	PUSH DWORD LOAD_KERNEL
	MOV EBP, DWORD PREPARE_LOAD_KERNEL	;IF THE CHAIN HITS EOF, THAN GO TO THE NEXT STEP "LOAD_LOADER"
	MOV EAX, EDX				;BOTH CMP_STOP AND NXT_CLUSTER TAKE EAX AS ARGUMENT
	.CREATE_CHAIN:
		MOV DWORD [ESI], EAX
		ADD ESI, FAT_ENTRY_SIZE

		CALL NXT_CLUSTER32
		CALL CMP_STOP32			;FIXED
		JMP .CREATE_CHAIN


PREPARE_LOAD_KERNEL:
MOV EBX, KERNELBASE
MOV SI, FATCHAINBASE
LOAD_KERNEL:
	;FIRST TWO CLUSTERS HAVE BEEN IGNORED???
	;;;;;;;;;;;;LAB;;;;;;;;;;;;;;;
	MOV EAX, DWORD [SI]
	CALL CLUSTER2SECTOR32
	MOVZX CX, BYTE [BPB_SECPERCLUS]
	CALL READ_ATA32
	ADD SI, 4
	MOV EAX, DWORD [SI]


	;REPLACE THE "MOV EBP, L1" WITH "MOV EBP, DWORD KERNELBASE" WHEN THE DEBUG IS FINISHED
	;MOV EBP, DWORD KERNELBASE
	mov ebp, l1


	CALL CMP_STOP32
	;IF NOT EOF...

	MOVZX EBP, BYTE [BPB_SECPERCLUS]
	SHL EBP, 9	;*512(SECTOR SIZE IN BYTES)
	ADD EBX, EBP

	JMP LOAD_KERNEL




	l1:
	mov eax, 0xdeadbeef
	jmp $





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[SECTION DATA]
MEM_STRUCT_COUNT: DB 0
FIRSTDATASECTOR: DD 0
WORD_PRINTED: DW 0
CURSOR_PTR: DW 0

[SECTION .STRINGS]
KERNEL_FILENAME: DB "KERNEL  SYS"

;END OF STRING
%DEFINE EOS (0X00)
%DEFINE CHAR_SPEC_N 10
%DEFINE CHAR_SPEC_B 8

[SECTION .GDT]

LABEL_GDT32:  DD 0,0
LABEL_DESCRIPTOR_CODE32:    DD 0X0000FFFF, 0X00CF9A00
LABEL_DESCRIPTOR_DATA32:    DD 0X0000FFFF, 0X00CF9200
LABLE_GDT32_END:
GDT32LEN    EQU     (LABLE_GDT32_END - LABEL_GDT32)
GDT32LIM    EQU     (GDT32LEN-1)
GDT32PTR:
    DW GDT32LIM
    DD LABEL_GDT32
SELECTOR_CODE32 EQU     (LABEL_DESCRIPTOR_CODE32-LABEL_GDT32)
SELECTOR_DATA32 EQU     (LABEL_DESCRIPTOR_DATA32-LABEL_GDT32)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[SECTION .IDT]
LABEL_IDT32:
    TIMES 0X50 DQ 0
LABEL_IDT32_END:
IDT32LEN    EQU     (LABEL_IDT32_END - LABEL_IDT32)
IDT32LIM    EQU     (IDT32LEN-1)
IDT32PTR:
    DW IDT32LIM
    DD LABEL_IDT32



[SECTION SUBROUTINE]

%INCLUDE "DISPLAY.INC"
%INCLUDE "MAIN32.INC"