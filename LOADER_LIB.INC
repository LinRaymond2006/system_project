;DH:ROW
;DL:COLUMN
;BH:DISPLAY_PAGE(SETTED 0 IN MOST CASES)
DO_SET_CURSOR:
	PUSH AX
	MOV  AH, 02H      ; BIOS.SETCURSORPOSITION
	INT  0X10
	POP AX
	RET

DO_DISABLE_CURSOR:
	PUSHA
	MOV AH, 0X1
	MOV CH,0X2F
	INT 0X10
	POPA


;EAX:POITNTER TO THE STRING
;EBX:STRING ATTRIBUTE	(ONLY THE LOW 16BIT WILL BE USED)
;ECX:STRING LENGTH

;ATTRIBUTE:
;Bit(s)	Value
;0-7	ASCII code point
;8-11	Foreground color
;12-14	Background color
;15	Blink


;80 cols * 25 rols
;X:0~79
;Y:0~24
%DEFINE MAX_COL 80-1
%DEFINE MAX_ROL 25-1

DO_DISPLAY_TEXT:
	PUSHAD
	.LOOP:

		MOV SI, WORD [EAX]
		CMP SI, '\N'
		JNE .NOT_SPECIAL

		MOV DI, 1

		.NOT_SPECIAL
		SHL SI, 8
		OR SI, BX
		PUSH SI
		;SI NOW HOLD THE (ASCII+ATTR) VALUE

		INC EAX		;UPDATE THE POINTER
		DEC ECX
		CMP ECX, 0	;IF ECX==0:FINISH
		JE .RETURN

		;SPECIAL CHARS SUPPORTED:	'\N'
		;IF DI IS NOT 0, THAN IT'S A RETURN CHARACTER
		CMP DI, 0
		JNE .NEWLINE
		JMP .WRITE
		.NEWLINE:
			MOV BYTE [CURSOR_X], 0
			CMP BYTE [CURSOR_Y], MAX_ROL
			JE .END_OF_PAGE
			INC BYTE [CURSOR_Y]
			.END_OF_PAGE:
				CALL SCROLL_LINE		;SCROLL LINE BY 1
		.WRITE:
		MOV SI, BYTE [CURSOR_X]
		MOV DI, BYTE [CURSOR_Y]
		LEA BP, [CURSOR_Y*MAX_COL+CURSOR_X]
		
		;2 BYTES = A WORD ON SCREEN (ASCII+ATTR)
		;BP=BP*2
		SHR BP, 1

		POP SI
		MOV WORD [GS:BP], SI

		JMP .LOOP

	.RETURN:
	POPAD
	RET

SCROLL_LINE:
	PUSHAD
	;NEED TO COPY 3840 BYTES FROM 0XB8160~0xB8FA0 TO 0XB8000~0XB8F50

	DEC BYTE [CURSOR_Y]
	POPAD
	RET