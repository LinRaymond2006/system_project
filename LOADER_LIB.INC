;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;DH:ROW
;DL:COLUMN
;BH:DISPLAY_PAGE(SETTED 0 IN MOST CASES)
DO_SET_CURSOR:
	PUSH AX
	MOV  AH, 02H      ; BIOS.SETCURSORPOSITION
	INT  0X10
	POP AX
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DO_DISABLE_CURSOR:
	PUSHA
	MOV AH, 0X1
	MOV CH,0X2F
	INT 0X10
	POPA
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;EAX:POITNTER TO THE STRING
;EBX:STRING ATTRIBUTE	(ONLY THE LOW 16BIT WILL BE USED)
;ECX:STRING LENGTH

;ATTRIBUTE:
;BIT(S)	VALUE
;0-7	ASCII CODE POINT
;8-11	FOREGROUND COLOR
;12-14	BACKGROUND COLOR
;15	BLINK


;80 COLS * 25 ROLS
%DEFINE COLS 80
%DEFINE ROLS 25
%DEFINE FRAME_LIMIT ((COLS*ROLS*PIXEL_WIDTH)+PIXEL_WIDTH)
%DEFINE CHAR_SPEC_N 10
%DEFINE CHAR_SPEC_B 8
%DEFINE PIXEL_WIDTH 2
%DEFINE END_OF_STRING 0X00
;PRINT A STRING IN DEFUALT BIOS TEXT DISPLAY ENVIRONMENT
;STRING MUST BE NULL-TERMINATED
;THE LENGTH STRING CAN BE FROM 0X0001 TO 0XFFFF
;RECIEVE:
;EAX:POINTER TO THE STRING
;BX:ATTRIBUTE OF THE STRING
;RETURN:NONE
DO_DISPLAY_TEXT:
	;LOOP
		;CALC THE OFFSET:
		;GENERATE THE CHAR WITH ATTRIBUTE
		;IS SPECIAL CHAR? (IS '\N' ?)
		;IF IS SPECIAL CHAR, GOTO PRINT_SPECIAL_CHAR
		;PRINT CHAR (WRITE INTO MEMORY WITH WORD [GS:OFFSET])
		;PRINT_SPECIAL_CHAR.\N:CURSOR_Y+=1;UPDATE CURSOR;
		;PRINT_SPECIAL_CHAR.\B:ERASE THE ASCII (CURSOR_X, CURSOR_Y) WITH SPACE ' ', CURSOR_X-=1;

	.SAVE_VALUE:
		PUSH EDX
		PUSH EBP
		PUSH EDI
		PUSH ESI
		MOV CX, 0XFFFF
	.LOOP_MAIN:
		MOV BP, WORD [CURSOR_PTR]
		MOVZX SI, BYTE [EAX]

		CMP SI, CHAR_SPEC_N
		JE .NEW_LINE
		JMP .CONT_LABEL
		.NEW_LINE:
		CALL PRINT_NEW_LINE
		INC EAX
		DEC CX
		JMP .LOOP_MAIN


		.CONT_LABEL:
		;NORMAL CHAR:
		SHL BX, 8 	;BX:STYLE
		ADD SI, BX 	;SI:ASCII
		SHR BX, 8
		MOV WORD [GS:BP], SI
		INC WORD [WORD_PRINTED]
		INC EAX
		;COMPARE IS END OF STRING (0X00)
		MOV DL, BYTE [EAX]
		CMP DL, END_OF_STRING
		JE .RESTORE_VALUE_AND_RET

		ADD WORD [CURSOR_PTR], PIXEL_WIDTH
		CMP WORD [CURSOR_PTR], FRAME_LIMIT
		JGE .1
		JMP .2
		.1:CALL SCROLL_LINE
		.2:
		LOOP .LOOP_MAIN

	.RESTORE_VALUE_AND_RET:
		POP ESI
		POP EDI
		POP EBP
		POP EDX
		RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PRINT_NEW_LINE:
	PUSHA
	;MOV WORD [WORD_PRINTED], 1
	MOV AX, WORD [WORD_PRINTED]
	SHR BP, 1
	SUB BP, AX
	ADD BP, COLS
	SHL BP, 1
	

	MOV WORD [CURSOR_PTR], BP
	MOV WORD [WORD_PRINTED], 0
	.FINISH:
	CMP WORD [CURSOR_PTR], FRAME_LIMIT
	JGE .SCROLL
	JMP .RET
	.SCROLL:CALL SCROLL_LINE
	.RET:
	POPA
	RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

%DEFINE EX_REG_SZ 0X4
;NEED 40*25 =1000 TIMES
SCROLL_LINE:
	PUSHAD
	MOV SI, COLS*PIXEL_WIDTH
	XOR DI, DI
	MOV CX, 1000
	.1:
	MOV EBP, DWORD [GS:SI]
	MOV DWORD [GS:DI], EBP
	ADD SI, EX_REG_SZ
	ADD DI, EX_REG_SZ
	LOOP .1
	.RETURN:
	POPAD
	SUB WORD [CURSOR_PTR], COLS
	RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DO_CLEAR_SCR:
	PUSHA
	MOV	AX,	0600H
	MOV	BX,	0700H
	MOV	CX,	0
	MOV	DX,	0184FH
	INT	0X10
	POPA
	RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



